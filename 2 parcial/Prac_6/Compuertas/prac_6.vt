// Jed2vlog, ispLEVER version 2.00 
// Header :
//    File Name :
//       prac_6 
//    Circuit Name :
//       Entradas 
//    Last Update :
//       Sun Apr 08 19:41:12 2018
//    Device Information :
//       PLD Type P22V10G
//    Delay Model Selected :TYP
//    Jedec Information :
//	ispLEVER Classic 2.0.00.17.20.15 Lattice Semiconductor Corp.
//	JEDEC file for: P22V10G V9.0
//	Created on: Sun Apr 08 19:40:55 2018
//	
//	
// endHeader


// Delay Assigments
`timescale 1ns /100ps
//----------------------------------------------------------------------//
//                                                                      //
//              MAIN PLD NETLIST MODULE                                 //
//                                                                      //
//----------------------------------------------------------------------//

module Entradas(A,B,C,D,E,PIN06,PIN07,PIN08,PIN09,PIN10,PIN11,PIN12,PIN13,F6,
             F4,F2,PIN17,PIN18,PIN19,F1,F3,F5,F3_c_1,PIN24);
	inout F6, F4, F2,PIN17,PIN18,PIN19, F1, F3, F5, F3_c_1;
	input A, B, C, D, E, PIN06, PIN07, PIN08, PIN09, PIN10, PIN11, PIN12, PIN13
             , PIN24;
	supply0 GND;
	supply1 PWR;

//Pin Assignments:
//        PIN01 = A;
//        PIN02 = B;
//        PIN03 = C;
//        PIN04 = D;
//        PIN05 = E;
//        PIN14 = F6;
//        PIN15 = F4;
//        PIN16 = F2;
//        PIN20 = F1;
//        PIN21 = F3;
//        PIN22 = F5;
//        PIN23 = F3_c_1;

// Delay Parameters:
//   TYP delay used
parameter tpLH09 = 0:0:0;
parameter tpHL09 = 0:0:0;
parameter tpLH11 = 0:0:0;
parameter tpHL11 = 0:0:0;
parameter tpLH12 = 0:0:0;
parameter tpHL12 = 0:0:0;
parameter tpLH03 = 0:0:0;
parameter tpHL03 = 0:0:0;
parameter tpLH05 = 0:0:0;
parameter tpHL05 = 0:0:0;
parameter tpLH_inco_lump = 1:6:10;
parameter tpHL_inco_lump = 1:6:10;
parameter tpLH_oe = 0:0:0;
parameter tpHL_oe = 0:0:0;
parameter tpLH_oe_pterm = 1:6:10;
parameter tpHL_oe_pterm = 1:6:10;
parameter tpLH_preset_lump = 0:0:0;
parameter tpHL_preset_lump = 0:0:0;
parameter tpLH_reset_lump = 1:7:13;
parameter tpHL_reset_lump = 1:7:13;
parameter tpLH_fo_lump = 0:1:4;
parameter tpHL_fo_lump = 0:1:4;

//   Input Buffer:
	andinv_Entradas  CLKIN1( CLKIN1_o, CLKIN1_ob, A);
	andinv_Entradas  INBUF02( INBUF02_o, INBUF02_ob, B);
	andinv_Entradas  INBUF03( INBUF03_o, INBUF03_ob, C);
	andinv_Entradas  INBUF04( INBUF04_o, INBUF04_ob, D);
	andinv_Entradas  INBUF05( INBUF05_o, INBUF05_ob, E);
	andinv_Entradas  INBUF06( INBUF06_o, INBUF06_ob, PIN06);
	andinv_Entradas  INBUF07( INBUF07_o, INBUF07_ob, PIN07);
	andinv_Entradas  INBUF08( INBUF08_o, INBUF08_ob, PIN08);
	andinv_Entradas  INBUF09( INBUF09_o, INBUF09_ob, PIN09);
	andinv_Entradas  INBUF10( INBUF10_o, INBUF10_ob, PIN10);
	andinv_Entradas  INBUF11( INBUF11_o, INBUF11_ob, PIN11);
	andinv_Entradas  INBUF13( INBUF13_o, INBUF13_ob, PIN13);
	andinv_Entradas  INBUF14( INBUF14_o, INBUF14_ob, F6);
	andinv_Entradas  INBUF15( INBUF15_o, INBUF15_ob, F4);
	andinv_Entradas  INBUF16( INBUF16_o, INBUF16_ob, F2);
	andinv_Entradas  INBUF20( INBUF20_o, INBUF20_ob, F1);
	andinv_Entradas  INBUF21( INBUF21_o, INBUF21_ob, F3);
	andinv_Entradas  INBUF22( INBUF22_o, INBUF22_ob, F5);
	andinv_Entradas  INBUF23( INBUF23_o, INBUF23_ob, F3_c_1);

//   Product Terms (AND array):
	and  #(tpLH03,tpHL03) PT002_88( PT002_88_o, CLKIN1_ob, INBUF05_o);
	and  #(tpLH03,tpHL03) PT003_132( PT003_132_o, CLKIN1_o, INBUF05_ob);
	and  #(tpLH03,tpHL03) PT011_484( PT011_484_o, CLKIN1_ob, INBUF02_ob, INBUF03_ob, INBUF04_ob, INBUF05_ob);
	and  #(tpLH03,tpHL03) PT022_968( PT022_968_o, INBUF23_o, INBUF02_ob, INBUF03_o, INBUF04_o);
	and  #(tpLH03,tpHL03) PT023_1012( PT023_1012_o, INBUF23_o, INBUF02_o, INBUF03_ob, INBUF04_o);
	and  #(tpLH03,tpHL03) PT024_1056( PT024_1056_o, INBUF23_o, INBUF02_o, INBUF03_o, INBUF04_ob);
	and  #(tpLH03,tpHL03) PT025_1100( PT025_1100_o, INBUF23_o, INBUF02_ob, INBUF03_ob, INBUF04_ob);
	and  #(tpLH03,tpHL03) PT026_1144( PT026_1144_o, INBUF23_ob, INBUF02_o, INBUF03_o, INBUF04_o);
	and  #(tpLH03,tpHL03) PT027_1188( PT027_1188_o, INBUF23_ob, INBUF02_ob, INBUF03_ob, INBUF04_o);
	and  #(tpLH03,tpHL03) PT028_1232( PT028_1232_o, INBUF23_ob, INBUF02_ob, INBUF03_o, INBUF04_ob);
	and  #(tpLH03,tpHL03) PT029_1276( PT029_1276_o, INBUF23_ob, INBUF02_o, INBUF03_ob, INBUF04_ob);
	and  #(tpLH03,tpHL03) PT035_1540( PT035_1540_o, CLKIN1_o, INBUF02_o, INBUF03_o, INBUF04_o, INBUF05_o);
	and  #(tpLH03,tpHL03) PT099_4356( PT099_4356_o, CLKIN1_ob, INBUF02_ob, INBUF03_ob, INBUF04_ob, INBUF05_ob);
	and  #(tpLH03,tpHL03) PT112_4928( PT112_4928_o, CLKIN1_o, INBUF02_o, INBUF03_o, INBUF04_o, INBUF05_o);
	and  #(tpLH03,tpHL03) PT123_5412( PT123_5412_o, INBUF23_o, INBUF02_o, INBUF03_o, INBUF04_o);
	and  #(tpLH03,tpHL03) PT124_5456( PT124_5456_o, INBUF23_o, INBUF02_ob, INBUF03_ob, INBUF04_o);
	and  #(tpLH03,tpHL03) PT125_5500( PT125_5500_o, INBUF23_o, INBUF02_ob, INBUF03_o, INBUF04_ob);
	and  #(tpLH03,tpHL03) PT126_5544( PT126_5544_o, INBUF23_o, INBUF02_o, INBUF03_ob, INBUF04_ob);
	and  #(tpLH03,tpHL03) PT127_5588( PT127_5588_o, INBUF23_ob, INBUF02_ob, INBUF03_o, INBUF04_o);
	and  #(tpLH03,tpHL03) PT128_5632( PT128_5632_o, INBUF23_ob, INBUF02_o, INBUF03_ob, INBUF04_o);
	and  #(tpLH03,tpHL03) PT129_5676( PT129_5676_o, INBUF23_ob, INBUF02_o, INBUF03_o, INBUF04_ob);
	and  #(tpLH03,tpHL03) PT130_5720( PT130_5720_o, INBUF23_ob, INBUF02_ob, INBUF03_ob, INBUF04_ob);

//   Sum Terms (OR arrray):
	or  #(tpLH_inco_lump,tpHL_inco_lump) ST014( ST014_o, PT123_5412_o, PT124_5456_o, PT125_5500_o, PT126_5544_o, PT127_5588_o, PT128_5632_o, PT129_5676_o, PT130_5720_o);
	or  #(tpLH_inco_lump,tpHL_inco_lump) ST015( ST015_o, PT112_4928_o);
	or  #(tpLH_inco_lump,tpHL_inco_lump) ST016( ST016_o, PT099_4356_o);
	or  #(tpLH_inco_lump,tpHL_inco_lump) ST020( ST020_o, PT035_1540_o);
	or  #(tpLH_inco_lump,tpHL_inco_lump) ST021( ST021_o, PT022_968_o, PT023_1012_o, PT024_1056_o, PT025_1100_o, PT026_1144_o, PT027_1188_o, PT028_1232_o, PT029_1276_o);
	or  #(tpLH_inco_lump,tpHL_inco_lump) ST022( ST022_o, PT011_484_o);
	or  #(tpLH_inco_lump,tpHL_inco_lump) ST023( ST023_o, PT002_88_o, PT003_132_o);

//   Macro Cells:
	dff_spar_Entradas  OUTREG17( OUTREG17_o, OUTREG17_ob, GND, CLKIN1_o, NODE26_o, NODE25_o);
	dff_spar_Entradas  OUTREG18( OUTREG18_o, OUTREG18_ob, GND, CLKIN1_o, NODE26_o, NODE25_o);
	dff_spar_Entradas  OUTREG19( OUTREG19_o, OUTREG19_ob, GND, CLKIN1_o, NODE26_o, NODE25_o);

//   Feedback Node:
	andinv_Entradas  NODE30( NODE30_o, NODE30_ob, OUTREG17_ob);
	andinv_Entradas  NODE31( NODE31_o, NODE31_ob, OUTREG18_ob);
	andinv_Entradas  NODE32( NODE32_o, NODE32_ob, OUTREG19_ob);

//   Output Buffer:
	bufif1  #(tpLH11,tpHL11) OUTBUF14( F6, ST014_o, PWR);
	notif1  #(tpLH09,tpHL09) OUTBUF15( F4, ST015_o, PWR);
	notif1  #(tpLH09,tpHL09) OUTBUF16( F2, ST016_o, PWR);
	notif1  #(tpLH_fo_lump,tpHL_fo_lump) OUTBUF17( PIN17, OUTREG17_o, GND);
	notif1  #(tpLH_fo_lump,tpHL_fo_lump) OUTBUF18( PIN18, OUTREG18_o, GND);
	notif1  #(tpLH_fo_lump,tpHL_fo_lump) OUTBUF19( PIN19, OUTREG19_o, GND);
	bufif1  #(tpLH11,tpHL11) OUTBUF20( F1, ST020_o, PWR);
	bufif1  #(tpLH11,tpHL11) OUTBUF21( F3, ST021_o, PWR);
	bufif1  #(tpLH11,tpHL11) OUTBUF22( F5, ST022_o, PWR);
	bufif1  #(tpLH11,tpHL11) OUTBUF23( F3_c_1, ST023_o, PWR);
	andinv_Entradas  NODE25( NODE25_o, NODE25_ob, GND);
	andinv_Entradas  NODE26( NODE26_o, NODE26_ob, GND);
endmodule
/************************************************************************
*                                                                       *
*   MODULE: ANDINV                                                      *
*     Input Buffer with dual outputs.                                   *
*                                                                       *
*************************************************************************/
module andinv_Entradas(out,outb,in);
output out,outb;
input  in;
parameter tpLH_iob = 0:0:0; 
parameter tpHL_iob = 0:0:0; 
        
   and #(tpLH_iob,tpHL_iob) n1(out,in);
   not #(tpLH_iob,tpHL_iob) n2(outb,in);
endmodule
/************************************************************************
*                                                                       *
*   MODULE: DFF_SPAR :                                                     *
*      Leading edge triggered DFF.                                      *
*                                                                       *
*************************************************************************/
module dff_spar_Entradas(q,qb,d,clk,pst_h,rst_h);
   output q,qb;
   input  d,clk,pst_h,rst_h;
   wire   rst_pst;
   reg    pst;
initial
   pst = 1'b0; 
 
parameter pwrUpState = 0;
parameter pwrUpDelay = 50;
   dff_primitive_p0 DFF(q,data,clk,rst_h,pst);

//  Leading edge triggered DFF 
   or (data,d,pst_h);/* async preset gated with clock */
 
   nand (qb,q);
  
   assign rst_pst = ~rst_h && ~pst_h;
// Timing check
specify
specparam tpLH_co_lump = 1:4:7;
specparam tpHL_co_lump = 1:4:7;
specparam tpLH_ff_lump = 1:3:3;
specparam tpHL_ff_lump = 1:3:3;
specparam setup_ff_lump = 7:7:7;
specparam hold_ff_lump = 0:0:0;
specparam preset_ff_lump = 0:0:0;
specparam reset_ff_lump = 1:7:13;
   $setuphold(posedge clk &&& rst_pst, data &&& rst_pst, setup_ff_lump, hold_ff_lump);
   (clk *> q) = (tpLH_ff_lump,tpHL_ff_lump);
   (clk *> qb) = (tpLH_ff_lump,tpHL_ff_lump);
endspecify
endmodule
//
